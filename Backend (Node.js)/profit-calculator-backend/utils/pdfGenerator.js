// utils/pdfGenerator.js
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

/**
 * Generate PDF report for transactions
 * @param {Array} transactions - Array of transaction objects
 * @param {Object} options - PDF generation options
 * @returns {Promise<string>} - Path to generated PDF file
 */
const generateTransactionReport = (transactions, options = {}) => {
  return new Promise((resolve, reject) => {
    try {
      // Ensure reports directory exists
      const reportsDir = path.join(__dirname, '../reports');
      if (!fs.existsSync(reportsDir)) {
        fs.mkdirSync(reportsDir, { recursive: true });
      }
      
      // Create filename
      const timestamp = Date.now();
      const filename = `transaction-report-${timestamp}.pdf`;
      const filePath = path.join(reportsDir, filename);
      
      // Create PDF document
      const doc = new PDFDocument({
        margin: 50,
        size: 'A4'
      });
      
      // Pipe output to file
      const stream = fs.createWriteStream(filePath);
      doc.pipe(stream);
      
      // Add title
      doc.fontSize(20).text('Transaction Report', { align: 'center' });
      doc.moveDown();
      
      // Add date
      doc.fontSize(12).text(`Generated on: ${new Date().toLocaleDateString()}`, { align: 'center' });
      doc.moveDown(2);
      
      // Calculate summary
      const revenue = transactions
        .filter(t => t.type === 'revenue')
        .reduce((sum, t) => sum + Math.abs(t.amount), 0);
        
      const expenses = transactions
        .filter(t => t.type === 'expense')
        .reduce((sum, t) => sum + Math.abs(t.amount), 0);
        
      const profit = revenue - expenses;
      
      // Add summary
      doc.fontSize(14).text('Summary', { underline: true });
      doc.moveDown(0.5);
      doc.fontSize(12).text(`Total Transactions: ${transactions.length}`);
      doc.fontSize(12).text(`Total Revenue: $${revenue.toFixed(2)}`);
      doc.fontSize(12).text(`Total Expenses: $${expenses.toFixed(2)}`);
      doc.fontSize(12).text(`Net Profit: $${profit.toFixed(2)}`);
      doc.moveDown(2);
      
      // Add transactions table
      doc.fontSize(14).text('Transactions', { underline: true });
      doc.moveDown(0.5);
      
      // Table headers
      const tableTop = doc.y;
      const tableHeaders = ['Date', 'Description', 'Type', 'Category', 'Amount'];
      const columnWidths = [80, 200, 60, 80, 80];
      
      let currentY = tableTop;
      
      // Draw headers
      doc.fontSize(10).font('Helvetica-Bold');
      tableHeaders.forEach((header, i) => {
        const x = 50 + columnWidths.slice(0, i).reduce((sum, width) => sum + width, 0);
        doc.text(header, x, currentY);
      });
      
      currentY += 20;
      doc.font('Helvetica');
      
      // Draw rows
      transactions.forEach((transaction, index) => {
        // Check if we need a new page
        if (currentY > doc.page.height - 100) {
          doc.addPage();
          currentY = 50;
        }
        
        const x = 50;
        const date = new Date(transaction.date).toLocaleDateString();
        const description = transaction.description;
        const type = transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1);
        const category = transaction.category;
        const amount = transaction.type === 'revenue' 
          ? `$${Math.abs(transaction.amount).toFixed(2)}` 
          : `-$${Math.abs(transaction.amount).toFixed(2)}`;
        
        // Draw row
        doc.text(date, x, currentY);
        doc.text(description, x + columnWidths[0], currentY);
        doc.text(type, x + columnWidths[0] + columnWidths[1], currentY);
        doc.text(category, x + columnWidths[0] + columnWidths[1] + columnWidths[2], currentY);
        doc.text(amount, x + columnWidths[0] + columnWidths[1] + columnWidths[2] + columnWidths[3], currentY);
        
        currentY += 20;
      });
      
      // Add footer
      const pageCount = doc.bufferedPageRange().count;
      for (let i = 0; i < pageCount; i++) {
        doc.switchToPage(i);
        
        // Add page number
        doc.fontSize(8).text(
          `Page ${i + 1} of ${pageCount}`,
          50,
          doc.page.height - 50,
          { align: 'center' }
        );
        
        // Add footer text
        doc.fontSize(8).text(
          'Generated by Profit Calculator App',
          50,
          doc.page.height - 40,
          { align: 'center' }
        );
        
        // Add credit
        doc.fontSize(8).text(
          'Website developed by Anand Kumar',
          50,
          doc.page.height - 30,
          { align: 'center' }
        );
      }
      
      // Finalize PDF
      doc.end();
      
      // Handle stream events
      stream.on('finish', () => {
        resolve(filePath);
      });
      
      stream.on('error', (err) => {
        reject(err);
      });
    } catch (error) {
      reject(error);
    }
  });
};

module.exports = {
  generateTransactionReport
};